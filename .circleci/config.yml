version: 2.1

executors:
  my-executor:
    docker:
      - image: stsiwo/circleci-base:1.04 
    working_directory: /app

jobs:
  # build:
  #   machine: true
  #   steps:
  #     - checkout
  #     - run: 
  #         name: Setup Env File
  #         command: |
  #           echo DEBUG='*' > .env.dev
  #           echo API1_URL=http://api.stsiwo.com:5000 >> .env.dev
  #           echo PUBLIC_IMAGE_PATH=/images/ >> .env.dev

  #           echo DEBUG='*' > .env.prod
  #           echo API1_URL=http://api.stsiwo.com >> .env.prod
  #           echo PUBLIC_IMAGE_PATH=/images/ >> .env.prod

  #     - run:
  #         name: Build Image & Push Docker Hub 
  #         command: |
  #           # source ./set-app-version-env.sh
  #           # echo $APP_VERSION
  #           # docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASSWORD

  #           # docker build --tag=sts-blog-spa:$APP_VERSION --tag=sts-blog-spa --target=staging ./Spa
  #           # docker tag sts-blog-spa:$APP_VERSION stsiwo/sts-blog-spa:$APP_VERSION
  #           # docker tag sts-blog-spa stsiwo/sts-blog-spa
  #           # docker push stsiwo/sts-blog-spa

  #           # docker build --tag=sts-blog-api:$APP_VERSION --tag=sts-blog-api --target=staging ./Api1
  #           # docker tag sts-blog-api:$APP_VERSION stsiwo/sts-blog-api:$APP_VERSION
  #           # docker tag sts-blog-api stsiwo/sts-blog-api
  #           # docker push stsiwo/sts-blog-api

  build:
    executor: my-executor
    steps:
      - checkout
      - run:
          name: Create GCloud Service Key Filess
          command: |
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud info
            # gcloud compute scp --quiet ./docker-compose.staging.remote.yml ./docker-compose.staging.yml $GOOGLE_COMPUTE_NAME:/home/app --zone $GOOGLE_COMPUTE_ZONE
            gcloud compute scp --quiet ./docker-compose.staging.remote.yml ./docker-compose.staging.yml my-10th-startup-test:/home/app --zone us-central1-a 
            # workflows:
            #   version: 2.1
            #   build-deploy:
            #     jobs:
            #       - build
            #       - gcp-staging-deploy:
            #           requires:
            #             - build 


  ### TESTING
  #  build:
  #    docker:
  #      - image: circleci/node:10.16.3    
  #    steps:
  #      - checkout
  #      - run: 
  #          name: Install Dependencies 
  #          working_directory: ./Spa
  #          command: |
  #            ls -al 
  #            npm install
  #      - restore_cache:
  #          keys:
  #            - dep1-{{ checksum "./Spa/package-lock.json" }}
  #      - run:
  #          name: Run Test
  #          working_directory: ./Spa
  #          # add '-w 1' to prevent 'no enough memory' error
  #          command: |
  #            npx jest -w 1 tests/
  # build:
  #   docker:
  #     - image: circleci/python:3.6.8-stretch-browsers
  #   steps:
  #     - checkout 
  #     - run: 
  #         name: create env file 
  #         working_directory: ./Api1
  #         command: |
  #           echo CLIENT_SPA_URL=$CLIENT_SPA_URL > .env.testing
  #           echo DEV_CLIENT_SPA_URL=$DEV_CLIENT_SPA_URL >> .env.testing
  #           echo HOST_NAME=$HOST_NAME >> .env.testing
  #           echo JWT_ACCESS_TOKEN_EXPIRES=$JWT_ACCESS_TOKEN_EXPIRES >> .env.testing
  #           echo JWT_COOKIE_DOMAIN=$JWT_COOKIE_DOMAIN >> .env.testing
  #           echo JWT_REFRESH_TOKEN_EXPIRES=$JWT_REFRESH_TOKEN_EXPIRES >> .env.testing
  #           echo JWT_COOKIE_SECURE=$JWT_COOKIE_SECURE >> .env.testing
  #           echo JWT_SECRET_KEY=$JWT_SECRET_KEY >> .env.testing
  #           echo SECRET_KEY=$SECRET_KEY >> .env.testing
  #           echo SIGNER_SECRET_KEY=$SIGNER_SECRET_KEY >> .env.testing
  #           echo SQLALCHEMY_DATABASE_URI=$SQLALCHEMY_DATABASE_URI >> .env.testing
  #           echo SQLALCHEMY_ECHO=$SQLALCHEMY_ECHO >> .env.testing
  #           echo TESTING=$TESTING >> .env.testing
  #           echo UPLOAD_FOLDER=$UPLOAD_FOLDER >> .env.testing
  #           head ./.env.testing
  #     - run: 
  #         name: Install Dependencies 
  #         working_directory: ./Api1
  #         command: |
  #           ls -al 
  #           python3 -m venv venv
  #           . venv/bin/activate
  #           pip install -r requirements.txt
  #     - restore_cache:
  #         keys:
  #           - dep1-{{ checksum "./Api1/requirements.txt" }}
  #     - run:
  #         name: Setup and Run Test 
  #         working_directory: ./Api1
  #         command: |
  #           . venv/bin/activate
  #           ls -al ./venv/
  #           sh entrypoint.local.sh
  #           # workflows:
  #           #   version: 2
  #           #   build_and_test:
  #           #     jobs:
  #           #       - build 
  #           #       - test-api
