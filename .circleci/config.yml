version: 2.1

executors:
  my-executor:
    docker:
      - image: stsiwo/circleci-base:1.05
    working_directory: /app

jobs:
  build:
    executor: my-executor
    steps:
      - run:
          name: Prepare Service Testings (feature/* branch only)
          command: |
            echo 'Prepare Service Testings (feature/* branch only)'
  spa-service-testing:
    docker:
      - image: alpine:3.7
    steps:
      - run:
          name: Run SPA service testing (feature/* branch only)
          command: |
            echo 'Run SPA service testing (feature/* branch only)'
  api-service-testing:
    docker:
      - image: alpine:3.7
    steps:
      - run:
          name: Run API service testing (feature/* branch only)
          command: |
            echo 'Run API service testing (feature/* branch only)'
  build-push-src-image:
    machine: true
    steps:
      - checkout
      - run:
          name: Build Image & Push Docker Hub (feature/* branch only)
          command: |
            source ./set-app-version-env.sh
            docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASSWORD
    
            docker build --tag=sts-blog-spa:$APP_VERSION --tag=sts-blog-spa --target=staging ./Spa
            docker tag sts-blog-spa:$APP_VERSION stsiwo/sts-blog-spa:$APP_VERSION
            docker tag sts-blog-spa stsiwo/sts-blog-spa
            docker push stsiwo/sts-blog-spa
    
            docker build --tag=sts-blog-api:$APP_VERSION --tag=sts-blog-api --target=staging ./Api1
            docker tag sts-blog-api:$APP_VERSION stsiwo/sts-blog-api:$APP_VERSION
            docker tag sts-blog-api stsiwo/sts-blog-api
            docker push stsiwo/sts-blog-api
    
            docker build --tag=sts-blog-db:$APP_VERSION --tag=sts-blog-db ./Db
            docker tag sts-blog-db:$APP_VERSION stsiwo/sts-blog-db:$APP_VERSION
            docker tag sts-blog-db stsiwo/sts-blog-db
            docker push stsiwo/sts-blog-db
  staging-deployment:
    executor: my-executor
    steps:
      - checkout
      - run:
          name: Create GCloud Service Key Files
          command: |
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud info
            # gcloud compute scp --quiet ./docker-compose.staging.remote.yml ./docker-compose.staging.yml $GOOGLE_COMPUTE_NAME:/home/app --zone $GOOGLE_COMPUTE_ZONE
            # create trigger.txt which is watched by incrontab
            echo "trigger" > trigger.txt
            # ERROR: (gcloud.compute.scp) INVALID_ARGUMENT: Login profile size exceeds 32 KiB. Delete profile values to make additional space.
            # SOLUTION: add below command (reference: https://github.com/kyma-project/test-infra/issues/93)
            # REASON: may be public key is cached and exceed the limit so need to clear?? (reference: https://cloud.google.com/sdk/gcloud/reference/beta/compute/os-login/ssh-keys/remove)
            for i in $(gcloud compute os-login ssh-keys list | grep -v FINGERPRINT); do echo $i; gcloud compute os-login ssh-keys remove --key $i; done
            gcloud compute scp --quiet ./docker-compose.staging.yml ./trigger.txt my-15th-startup-test:/home/app --zone us-central1-a 
  acceptance-testing:
    docker:
      - image: alpine:3.7
    steps:
      - run:
          name: Excute Acceptance Testing (release/* branch only)
          command: |
            echo 'Excute Acceptance Testing (release/* branch only)'
  production-deployment:
    docker:
      - image: alpine:3.7
    steps:
      - run:
          name: Deploy To Production Server (master branch only)
          command: |
            echo 'Deploy To Production Server (master branch only)'
workflows:
  version: 2.1
  ci-cd:
    jobs:
      - build:
          filters:
            branches:
              only:
                - /feature\/.*/
      - spa-service-testing:
          requires:
            - build
          filters:
            branches:
              only:
                - /feature\/.*/
      - api-service-testing:
          requires:
            - build
          filters:
            branches:
              only:
                - /feature\/.*/
      - build-push-src-image:
          filters:
            branches:
              only:
                - /release\/.*/
      - staging-deployment:
          requires:
            - build-push-src-image
          filters:
            branches:
              only:
                - /release\/.*/
      - acceptance-testing:
          requires:
            - staging-deployment
          filters:
            branches:
              only:
                - /release\/.*/
      - production-deployment:
          filters:
            branches:
              only:
                - master 
      # jobs:
      #   build:
      #     executor: my-executor
      #     steps:
      #       - run:
      #           name: Build
      #           command: |
      #             echo 'Build'
      #       - run: mkdir -p workspace
      #       - run: echo "Hello, world!" > workspace/echo-output
      # 
      #       # Persist the specified paths (workspace/echo-output) into the workspace for use in downstream job.
      #       - persist_to_workspace:
      #           # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
      #           # taken to be the root directory of the workspace.
      #           root: workspace
      #           # Must be relative path from root
      #           paths:
      #             - echo-output
      #   spa-service-testing:
      #     executor: my-executor
      #     steps:
      #       - attach_workspace:
      #           # Must be absolute path or relative path from working_directory
      #           at: /tmp/workspace
      # 
      #       - run: |
      #           head /tmp/workspace/echo-output
      #           if [[ "cat /tmp/workspace/echo-output" == "Hello, world!" ]]; then
      #             echo "It worked!";
      #           else
      #             echo "Nope!"; exit 1
      #           fi
      #       - run:
      #           name: Run Spa (dev and release and master)
      #           command: |
      #             echo 'Running Spa Testing (dev only)'
      #   api-service-testing:
      #     docker:
      #       - image: alpine:3.7
      #     steps:
      #       - run:
      #           name: Run api (dev and release and master)
      #           command: |
      #             echo 'Running api Testing (dev only)'
      #   acceptance-testing:
      #     docker:
      #       - image: alpine:3.7
      #     steps:
      #       - run:
      #           name: Run Acceptance Testing (release and master)
      #           command: |
      #             echo 'Running api Testing (dev only)'
      #   deploy-staging:
      #     docker: 
      #       - image: alpine:3.7
      #     steps:
      #       - run:
      #           name: Deploy to Staging (release and master and if acceptance testing has passed)
      #           command: |
      #             echo 'Deploy to Staging (release only and if acceptance testing has passed)'
      #   deploy-production:
      #     docker:
      #       - image: alpine:3.7
      #     steps:
      #       - run:
      #           name: Deploy to Production (release and master and if acceptance testing has passed)
      #           command: |
      #             echo 'Deploy to Production (release only and if acceptance testing has passed)'
# executors:
#   my-executor:
#     docker:
#       - image: stsiwo/circleci-base:1.04 
#     working_directory: /app
# 
    # jobs:
    #   build:
    #     machine: true
    #     steps:
    #       - checkout
    #       - run:
    #           name: Build Image & Push Docker Hub 
    #           command: |
    #             source ./set-app-version-env.sh
    #             docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASSWORD
    # 
    #             docker build --tag=sts-blog-spa:$APP_VERSION --tag=sts-blog-spa --target=staging ./Spa
    #             docker tag sts-blog-spa:$APP_VERSION stsiwo/sts-blog-spa:$APP_VERSION
    #             docker tag sts-blog-spa stsiwo/sts-blog-spa
    #             docker push stsiwo/sts-blog-spa
    # 
    #             docker build --tag=sts-blog-api:$APP_VERSION --tag=sts-blog-api --target=staging ./Api1
    #             docker tag sts-blog-api:$APP_VERSION stsiwo/sts-blog-api:$APP_VERSION
    #             docker tag sts-blog-api stsiwo/sts-blog-api
    #             docker push stsiwo/sts-blog-api
    # 
    #             docker build --tag=sts-blog-db:$APP_VERSION --tag=sts-blog-db ./Db
    #             docker tag sts-blog-db:$APP_VERSION stsiwo/sts-blog-db:$APP_VERSION
    #             docker tag sts-blog-db stsiwo/sts-blog-db
    #             docker push stsiwo/sts-blog-db
    # 
    #   deploy:
    #     executor: my-executor
    #     steps:
    #       - checkout
    #       - run:
    #           name: Create GCloud Service Key Files
    #           command: |
    #             echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
    #             gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
    #             gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
    #             gcloud info
    #             # gcloud compute scp --quiet ./docker-compose.staging.remote.yml ./docker-compose.staging.yml $GOOGLE_COMPUTE_NAME:/home/app --zone $GOOGLE_COMPUTE_ZONE
    #             # create trigger.txt which is watched by incrontab
    #             echo "trigger" > trigger.txt
    #             # ERROR: (gcloud.compute.scp) INVALID_ARGUMENT: Login profile size exceeds 32 KiB. Delete profile values to make additional space.
    #             # SOLUTION: add below command (reference: https://github.com/kyma-project/test-infra/issues/93)
    #             # REASON: may be public key is cached and exceed the limit so need to clear?? (reference: https://cloud.google.com/sdk/gcloud/reference/beta/compute/os-login/ssh-keys/remove)
    #             for i in $(gcloud compute os-login ssh-keys list | grep -v FINGERPRINT); do echo $i; gcloud compute os-login ssh-keys remove --key $i; done
    #             gcloud compute scp --quiet ./docker-compose.staging.yml ./trigger.txt my-15th-startup-test:/home/app --zone us-central1-a 
    # workflows:
    #   version: 2
    #   build-deploy:
    #     jobs:
    #       - build
    #       - deploy: 
    #           requires:
    #             - build 
    # 
    # 
  ### TESTING
  #  build:
  #    docker:
  #      - image: circleci/node:10.16.3    
  #    steps:
  #      - checkout
  #      - run: 
  #          name: Install Dependencies 
  #          working_directory: ./Spa
  #          command: |
  #            ls -al 
  #            npm install
  #      - restore_cache:
  #          keys:
  #            - dep1-{{ checksum "./Spa/package-lock.json" }}
  #      - run:
  #          name: Run Test
  #          working_directory: ./Spa
  #          # add '-w 1' to prevent 'no enough memory' error
  #          command: |
  #            npx jest -w 1 tests/
  # build:
  #   docker:
  #     - image: circleci/python:3.6.8-stretch-browsers
  #   steps:
  #     - checkout 
  #     - run: 
  #         name: create env file 
  #         working_directory: ./Api1
  #         command: |
  #           echo CLIENT_SPA_URL=$CLIENT_SPA_URL > .env.testing
  #           echo DEV_CLIENT_SPA_URL=$DEV_CLIENT_SPA_URL >> .env.testing
  #           echo HOST_NAME=$HOST_NAME >> .env.testing
  #           echo JWT_ACCESS_TOKEN_EXPIRES=$JWT_ACCESS_TOKEN_EXPIRES >> .env.testing
  #           echo JWT_COOKIE_DOMAIN=$JWT_COOKIE_DOMAIN >> .env.testing
  #           echo JWT_REFRESH_TOKEN_EXPIRES=$JWT_REFRESH_TOKEN_EXPIRES >> .env.testing
  #           echo JWT_COOKIE_SECURE=$JWT_COOKIE_SECURE >> .env.testing
  #           echo JWT_SECRET_KEY=$JWT_SECRET_KEY >> .env.testing
  #           echo SECRET_KEY=$SECRET_KEY >> .env.testing
  #           echo SIGNER_SECRET_KEY=$SIGNER_SECRET_KEY >> .env.testing
  #           echo SQLALCHEMY_DATABASE_URI=$SQLALCHEMY_DATABASE_URI >> .env.testing
  #           echo SQLALCHEMY_ECHO=$SQLALCHEMY_ECHO >> .env.testing
  #           echo TESTING=$TESTING >> .env.testing
  #           echo UPLOAD_FOLDER=$UPLOAD_FOLDER >> .env.testing
  #           head ./.env.testing
  #     - run: 
  #         name: Install Dependencies 
  #         working_directory: ./Api1
  #         command: |
  #           ls -al 
  #           python3 -m venv venv
  #           . venv/bin/activate
  #           pip install -r requirements.txt
  #     - restore_cache:
  #         keys:
  #           - dep1-{{ checksum "./Api1/requirements.txt" }}
  #     - run:
  #         name: Setup and Run Test 
  #         working_directory: ./Api1
  #         command: |
  #           . venv/bin/activate
  #           ls -al ./venv/
  #           sh entrypoint.local.sh
  #           # workflows:
  #           #   version: 2
  #           #   build_and_test:
  #           #     jobs:
  #           #       - build 
  #           #       - test-api
