version: 2.1
jobs:
  build:
    docker:
      - image: alpine:3.7
    steps:
      - checkout
      - run:
          name: Temp Test 
          command: |
            ls -al 
            echo 'Temp Test'
  push:
    machine: true
    steps:
      - checkout
      - run:
          name: Build Image & Push Docker Hub 
          command: |
            source ./Spa/env.dev.sh
            source ./Spa/env.prod.sh
            source ./set-app-version-env.sh
            echo $APP_VERSION
            docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASSWORD
            docker build --tag=sts-blog-spa:$APP_VERSION --tag=sts-blog-spa --target=staging ./Spa
            docker tag sts-blog-spa:$APP_VERSION stsiwo/sts-blog-spa:$APP_VERSION
            docker tag sts-blog-spa stsiwo/sts-blog-spa
            docker push stsiwo/sts-blog-spa
workflows:
  version: 2.1
  build-deploy:
    jobs:
      - build
      - push:
          requires:
            - build 



  ### TESTING
  #  build:
  #    docker:
  #      - image: circleci/node:10.16.3    
  #    steps:
  #      - checkout
  #      - run: 
  #          name: Install Dependencies 
  #          working_directory: ./Spa
  #          command: |
  #            ls -al 
  #            npm install
  #      - restore_cache:
  #          keys:
  #            - dep1-{{ checksum "./Spa/package-lock.json" }}
  #      - run:
  #          name: Run Test
  #          working_directory: ./Spa
  #          # add '-w 1' to prevent 'no enough memory' error
  #          command: |
  #            npx jest -w 1 tests/
  # build:
  #   docker:
  #     - image: circleci/python:3.6.8-stretch-browsers
  #   steps:
  #     - checkout 
  #     - run: 
  #         name: create env file 
  #         working_directory: ./Api1
  #         command: |
  #           echo CLIENT_SPA_URL=$CLIENT_SPA_URL > .env.testing
  #           echo DEV_CLIENT_SPA_URL=$DEV_CLIENT_SPA_URL >> .env.testing
  #           echo HOST_NAME=$HOST_NAME >> .env.testing
  #           echo JWT_ACCESS_TOKEN_EXPIRES=$JWT_ACCESS_TOKEN_EXPIRES >> .env.testing
  #           echo JWT_COOKIE_DOMAIN=$JWT_COOKIE_DOMAIN >> .env.testing
  #           echo JWT_REFRESH_TOKEN_EXPIRES=$JWT_REFRESH_TOKEN_EXPIRES >> .env.testing
  #           echo JWT_COOKIE_SECURE=$JWT_COOKIE_SECURE >> .env.testing
  #           echo JWT_SECRET_KEY=$JWT_SECRET_KEY >> .env.testing
  #           echo SECRET_KEY=$SECRET_KEY >> .env.testing
  #           echo SIGNER_SECRET_KEY=$SIGNER_SECRET_KEY >> .env.testing
  #           echo SQLALCHEMY_DATABASE_URI=$SQLALCHEMY_DATABASE_URI >> .env.testing
  #           echo SQLALCHEMY_ECHO=$SQLALCHEMY_ECHO >> .env.testing
  #           echo TESTING=$TESTING >> .env.testing
  #           echo UPLOAD_FOLDER=$UPLOAD_FOLDER >> .env.testing
  #           head ./.env.testing
  #     - run: 
  #         name: Install Dependencies 
  #         working_directory: ./Api1
  #         command: |
  #           ls -al 
  #           python3 -m venv venv
  #           . venv/bin/activate
  #           pip install -r requirements.txt
  #     - restore_cache:
  #         keys:
  #           - dep1-{{ checksum "./Api1/requirements.txt" }}
  #     - run:
  #         name: Setup and Run Test 
  #         working_directory: ./Api1
  #         command: |
  #           . venv/bin/activate
  #           ls -al ./venv/
  #           sh entrypoint.local.sh
  #           # workflows:
  #           #   version: 2
  #           #   build_and_test:
  #           #     jobs:
  #           #       - build 
  #           #       - test-api
