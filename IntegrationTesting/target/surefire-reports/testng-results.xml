<?xml version="1.0" encoding="UTF-8"?>
<testng-results total="286" passed="0" failed="0" skipped="286">
  <reporter-output>
    <line>
      <![CDATA[After Class]]>
    </line>
    <line>
      <![CDATA[After Class]]>
    </line>
    <line>
      <![CDATA[After Class]]>
    </line>
    <line>
      <![CDATA[After Class]]>
    </line>
    <line>
      <![CDATA[After Class]]>
    </line>
    <line>
      <![CDATA[After Class]]>
    </line>
    <line>
      <![CDATA[After Class]]>
    </line>
    <line>
      <![CDATA[After Class]]>
    </line>
    <line>
      <![CDATA[After Class]]>
    </line>
    <line>
      <![CDATA[After Class]]>
    </line>
  </reporter-output>
  <suite started-at="2020-02-16T03:27:39Z" name="Surefire suite" finished-at="2020-02-16T03:27:40Z" duration-ms="148">
    <groups>
    </groups>
    <test started-at="2020-02-16T03:27:39Z" name="Surefire test" finished-at="2020-02-16T03:27:40Z" duration-ms="148">
      <class name="example.NewBlogPageTest">
        <test-method is-config="true" signature="beforeClass(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:example.NewBlogPageTest@ba2f4ec]" started-at="2020-02-15T19:27:40Z" name="beforeClass" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.NewBlogPageTest@ba2f4ec]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayNewBlogPageHeading(org.openqa.selenium.Dimension)[pri:0, instance:example.NewBlogPageTest@ba2f4ec]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayNewBlogPageHeading" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayNewBlogPageHeading -->
        <test-method signature="shouldDisplayNewBlogPageHeading(org.openqa.selenium.Dimension)[pri:0, instance:example.NewBlogPageTest@ba2f4ec]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayNewBlogPageHeading" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayNewBlogPageHeading -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.NewBlogPageTest@ba2f4ec]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayNewBlogPageHeading(org.openqa.selenium.Dimension)[pri:0, instance:example.NewBlogPageTest@ba2f4ec]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayNewBlogPageHeading" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayNewBlogPageHeading -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.NewBlogPageTest@ba2f4ec]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayNewBlogPageHeading(org.openqa.selenium.Dimension)[pri:0, instance:example.NewBlogPageTest@ba2f4ec]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayNewBlogPageHeading" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayNewBlogPageHeading -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.NewBlogPageTest@ba2f4ec]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldNotDisplayNonPublishedBlogAtBlogListPage(org.openqa.selenium.Dimension)[pri:0, instance:example.NewBlogPageTest@ba2f4ec]" started-at="2020-02-15T19:27:40Z" name="shouldNotDisplayNonPublishedBlogAtBlogListPage" data-provider="desktop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotDisplayNonPublishedBlogAtBlogListPage -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.NewBlogPageTest@ba2f4ec]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayPublishedBlogAtBlogListPage(org.openqa.selenium.Dimension)[pri:0, instance:example.NewBlogPageTest@ba2f4ec]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayPublishedBlogAtBlogListPage" data-provider="desktop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayPublishedBlogAtBlogListPage -->
        <test-method signature="shouldPublishNewBlog(org.openqa.selenium.Dimension)[pri:0, instance:example.NewBlogPageTest@ba2f4ec]" started-at="2020-02-15T19:27:40Z" name="shouldPublishNewBlog" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldPublishNewBlog -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.NewBlogPageTest@ba2f4ec]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldPublishNewBlog(org.openqa.selenium.Dimension)[pri:0, instance:example.NewBlogPageTest@ba2f4ec]" started-at="2020-02-15T19:27:40Z" name="shouldPublishNewBlog" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldPublishNewBlog -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.NewBlogPageTest@ba2f4ec]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldPublishNewBlog(org.openqa.selenium.Dimension)[pri:0, instance:example.NewBlogPageTest@ba2f4ec]" started-at="2020-02-15T19:27:40Z" name="shouldPublishNewBlog" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldPublishNewBlog -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.NewBlogPageTest@ba2f4ec]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.NewBlogPageTest@ba2f4ec]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldPublishNewBlog(org.openqa.selenium.Dimension)[pri:0, instance:example.NewBlogPageTest@ba2f4ec]" started-at="2020-02-15T19:27:40Z" name="shouldPublishNewBlog" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="1" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldPublishNewBlog -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.NewBlogPageTest@ba2f4ec]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldSaveNewBlog(org.openqa.selenium.Dimension)[pri:0, instance:example.NewBlogPageTest@ba2f4ec]" started-at="2020-02-15T19:27:40Z" name="shouldSaveNewBlog" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSaveNewBlog -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.NewBlogPageTest@ba2f4ec]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldSaveNewBlog(org.openqa.selenium.Dimension)[pri:0, instance:example.NewBlogPageTest@ba2f4ec]" started-at="2020-02-15T19:27:40Z" name="shouldSaveNewBlog" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSaveNewBlog -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.NewBlogPageTest@ba2f4ec]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldSaveNewBlog(org.openqa.selenium.Dimension)[pri:0, instance:example.NewBlogPageTest@ba2f4ec]" started-at="2020-02-15T19:27:40Z" name="shouldSaveNewBlog" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSaveNewBlog -->
        <test-method is-config="true" signature="afterClass()[pri:0, instance:example.NewBlogPageTest@ba2f4ec]" started-at="2020-02-15T19:27:40Z" name="afterClass" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="FAIL">
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
	at example.BaseTest.afterClass(BaseTest.java:134)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:564)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:213)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:138)
	at org.testng.internal.TestMethodWorker.invokeAfterClassMethods(TestMethodWorker.java:225)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:114)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
            <line>
              <![CDATA[After Class]]>
            </line>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.NewBlogPageTest@ba2f4ec]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldSaveNewBlog(org.openqa.selenium.Dimension)[pri:0, instance:example.NewBlogPageTest@ba2f4ec]" started-at="2020-02-15T19:27:40Z" name="shouldSaveNewBlog" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSaveNewBlog -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.NewBlogPageTest@ba2f4ec]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
      </class> <!-- example.NewBlogPageTest -->
      <class name="example.UpdateBlogPageTest">
        <test-method signature="shouldDisplayUpdateBlogPageHeading(org.openqa.selenium.Dimension)[pri:0, instance:example.UpdateBlogPageTest@1c1bbc4e]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayUpdateBlogPageHeading" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="1" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayUpdateBlogPageHeading -->
        <test-method is-config="true" signature="beforeClass(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:example.UpdateBlogPageTest@1c1bbc4e]" started-at="2020-02-15T19:27:40Z" name="beforeClass" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.UpdateBlogPageTest@1c1bbc4e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayPublishedBlogAtBlogListPage(org.openqa.selenium.Dimension)[pri:0, instance:example.UpdateBlogPageTest@1c1bbc4e]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayPublishedBlogAtBlogListPage" data-provider="laptop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayPublishedBlogAtBlogListPage -->
        <test-method signature="shouldDisplayUpdateBlogPageHeading(org.openqa.selenium.Dimension)[pri:0, instance:example.UpdateBlogPageTest@1c1bbc4e]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayUpdateBlogPageHeading" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayUpdateBlogPageHeading -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.UpdateBlogPageTest@1c1bbc4e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.UpdateBlogPageTest@1c1bbc4e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.UpdateBlogPageTest@1c1bbc4e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayUpdateBlogPageHeading(org.openqa.selenium.Dimension)[pri:0, instance:example.UpdateBlogPageTest@1c1bbc4e]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayUpdateBlogPageHeading" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayUpdateBlogPageHeading -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.UpdateBlogPageTest@1c1bbc4e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayUpdateBlogPageHeading(org.openqa.selenium.Dimension)[pri:0, instance:example.UpdateBlogPageTest@1c1bbc4e]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayUpdateBlogPageHeading" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayUpdateBlogPageHeading -->
        <test-method signature="shouldPublishUpdateBlog(org.openqa.selenium.Dimension)[pri:0, instance:example.UpdateBlogPageTest@1c1bbc4e]" started-at="2020-02-15T19:27:40Z" name="shouldPublishUpdateBlog" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldPublishUpdateBlog -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.UpdateBlogPageTest@1c1bbc4e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldPublishUpdateBlog(org.openqa.selenium.Dimension)[pri:0, instance:example.UpdateBlogPageTest@1c1bbc4e]" started-at="2020-02-15T19:27:40Z" name="shouldPublishUpdateBlog" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="1" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldPublishUpdateBlog -->
        <test-method signature="shouldNotDisplayNonPublishedBlogAtBlogListPage(org.openqa.selenium.Dimension)[pri:0, instance:example.UpdateBlogPageTest@1c1bbc4e]" started-at="2020-02-15T19:27:40Z" name="shouldNotDisplayNonPublishedBlogAtBlogListPage" data-provider="laptop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotDisplayNonPublishedBlogAtBlogListPage -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.UpdateBlogPageTest@1c1bbc4e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.UpdateBlogPageTest@1c1bbc4e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldPublishUpdateBlog(org.openqa.selenium.Dimension)[pri:0, instance:example.UpdateBlogPageTest@1c1bbc4e]" started-at="2020-02-15T19:27:40Z" name="shouldPublishUpdateBlog" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldPublishUpdateBlog -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.UpdateBlogPageTest@1c1bbc4e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldPublishUpdateBlog(org.openqa.selenium.Dimension)[pri:0, instance:example.UpdateBlogPageTest@1c1bbc4e]" started-at="2020-02-15T19:27:40Z" name="shouldPublishUpdateBlog" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldPublishUpdateBlog -->
        <test-method signature="shouldSaveUpdateBlog(org.openqa.selenium.Dimension)[pri:0, instance:example.UpdateBlogPageTest@1c1bbc4e]" started-at="2020-02-15T19:27:40Z" name="shouldSaveUpdateBlog" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSaveUpdateBlog -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.UpdateBlogPageTest@1c1bbc4e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.UpdateBlogPageTest@1c1bbc4e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.UpdateBlogPageTest@1c1bbc4e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldSaveUpdateBlog(org.openqa.selenium.Dimension)[pri:0, instance:example.UpdateBlogPageTest@1c1bbc4e]" started-at="2020-02-15T19:27:40Z" name="shouldSaveUpdateBlog" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSaveUpdateBlog -->
        <test-method signature="shouldSaveUpdateBlog(org.openqa.selenium.Dimension)[pri:0, instance:example.UpdateBlogPageTest@1c1bbc4e]" started-at="2020-02-15T19:27:40Z" name="shouldSaveUpdateBlog" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSaveUpdateBlog -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.UpdateBlogPageTest@1c1bbc4e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldSaveUpdateBlog(org.openqa.selenium.Dimension)[pri:0, instance:example.UpdateBlogPageTest@1c1bbc4e]" started-at="2020-02-15T19:27:40Z" name="shouldSaveUpdateBlog" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSaveUpdateBlog -->
        <test-method is-config="true" signature="afterClass()[pri:0, instance:example.UpdateBlogPageTest@1c1bbc4e]" started-at="2020-02-15T19:27:40Z" name="afterClass" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="FAIL">
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
	at example.BaseTest.afterClass(BaseTest.java:134)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:564)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:213)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:138)
	at org.testng.internal.TestMethodWorker.invokeAfterClassMethods(TestMethodWorker.java:225)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:114)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
            <line>
              <![CDATA[After Class]]>
            </line>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.UpdateBlogPageTest@1c1bbc4e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
      </class> <!-- example.UpdateBlogPageTest -->
      <class name="example.LoginPageTest">
        <test-method signature="shouldDisplayEmailInputEmptyValidationErrorWhenItIsFocused(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayEmailInputEmptyValidationErrorWhenItIsFocused" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayEmailInputEmptyValidationErrorWhenItIsFocused -->
        <test-method signature="shouldDisplayConfirmInputEmptyValidationErrorWhenItIsFocused(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayConfirmInputEmptyValidationErrorWhenItIsFocused" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayConfirmInputEmptyValidationErrorWhenItIsFocused -->
        <test-method signature="shouldDisplayEmailInputEmptyValidationErrorWhenItIsFocused(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayEmailInputEmptyValidationErrorWhenItIsFocused" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayEmailInputEmptyValidationErrorWhenItIsFocused -->
        <test-method signature="shouldDisplayConfirmInputEmptyValidationErrorWhenItIsFocused(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayConfirmInputEmptyValidationErrorWhenItIsFocused" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayConfirmInputEmptyValidationErrorWhenItIsFocused -->
        <test-method signature="shouldDisplayConfirmInputEmptyValidationErrorWhenItIsFocused(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayConfirmInputEmptyValidationErrorWhenItIsFocused" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayConfirmInputEmptyValidationErrorWhenItIsFocused -->
        <test-method signature="shouldDisplayEmailInputEmptyValidationErrorWhenItIsFocused(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayEmailInputEmptyValidationErrorWhenItIsFocused" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayEmailInputEmptyValidationErrorWhenItIsFocused -->
        <test-method signature="shouldDisplayConfirmInputEmptyValidationErrorWhenItIsFocused(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayConfirmInputEmptyValidationErrorWhenItIsFocused" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayConfirmInputEmptyValidationErrorWhenItIsFocused -->
        <test-method is-config="true" signature="beforeClass(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="beforeClass" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="shouldDisplayFetchErrorMessageWhenProvidedPasswordIsInvalid(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayFetchErrorMessageWhenProvidedPasswordIsInvalid" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayFetchErrorMessageWhenProvidedPasswordIsInvalid -->
        <test-method signature="shouldDisplayFetchErrorMessageWhenProvidedEmailDoesNotRegistered(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayFetchErrorMessageWhenProvidedEmailDoesNotRegistered" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayFetchErrorMessageWhenProvidedEmailDoesNotRegistered -->
        <test-method signature="shouldDisplayFetchErrorMessageWhenProvidedEmailDoesNotRegistered(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayFetchErrorMessageWhenProvidedEmailDoesNotRegistered" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayFetchErrorMessageWhenProvidedEmailDoesNotRegistered -->
        <test-method signature="shouldDisplayFetchErrorMessageWhenProvidedPasswordIsInvalid(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayFetchErrorMessageWhenProvidedPasswordIsInvalid" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayFetchErrorMessageWhenProvidedPasswordIsInvalid -->
        <test-method signature="shouldDisplayFetchErrorMessageWhenProvidedEmailDoesNotRegistered(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayFetchErrorMessageWhenProvidedEmailDoesNotRegistered" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayFetchErrorMessageWhenProvidedEmailDoesNotRegistered -->
        <test-method signature="shouldDisplayFetchErrorMessageWhenProvidedEmailDoesNotRegistered(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayFetchErrorMessageWhenProvidedEmailDoesNotRegistered" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayFetchErrorMessageWhenProvidedEmailDoesNotRegistered -->
        <test-method signature="shouldDisplayFetchErrorMessageWhenProvidedPasswordIsInvalid(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayFetchErrorMessageWhenProvidedPasswordIsInvalid" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayFetchErrorMessageWhenProvidedPasswordIsInvalid -->
        <test-method signature="shouldDisplayEmailInputEmptyValidationErrorWhenItIsFocused(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayEmailInputEmptyValidationErrorWhenItIsFocused" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayEmailInputEmptyValidationErrorWhenItIsFocused -->
        <test-method signature="shouldDisplayFetchErrorMessageWhenProvidedPasswordIsInvalid(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayFetchErrorMessageWhenProvidedPasswordIsInvalid" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayFetchErrorMessageWhenProvidedPasswordIsInvalid -->
        <test-method signature="shouldNotAllowToSubmitWhenAtLeastOneError(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldNotAllowToSubmitWhenAtLeastOneError" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotAllowToSubmitWhenAtLeastOneError -->
        <test-method signature="shouldNotAllowToSubmitWhenAtLeastOneError(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldNotAllowToSubmitWhenAtLeastOneError" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotAllowToSubmitWhenAtLeastOneError -->
        <test-method signature="shouldDisplayPasswordInputEmptyValidationErrorWhenItIsFocused(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayPasswordInputEmptyValidationErrorWhenItIsFocused" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayPasswordInputEmptyValidationErrorWhenItIsFocused -->
        <test-method signature="shouldNotAllowToSubmitWhenAtLeastOneError(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldNotAllowToSubmitWhenAtLeastOneError" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotAllowToSubmitWhenAtLeastOneError -->
        <test-method signature="shouldNotAllowToSubmitWhenAtLeastOneError(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldNotAllowToSubmitWhenAtLeastOneError" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotAllowToSubmitWhenAtLeastOneError -->
        <test-method signature="shouldDisplayPasswordInputEmptyValidationErrorWhenItIsFocused(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayPasswordInputEmptyValidationErrorWhenItIsFocused" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayPasswordInputEmptyValidationErrorWhenItIsFocused -->
        <test-method signature="shouldDisplayPasswordInputEmptyValidationErrorWhenItIsFocused(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayPasswordInputEmptyValidationErrorWhenItIsFocused" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayPasswordInputEmptyValidationErrorWhenItIsFocused -->
        <test-method signature="shouldDisplayPasswordInputEmptyValidationErrorWhenItIsFocused(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayPasswordInputEmptyValidationErrorWhenItIsFocused" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayPasswordInputEmptyValidationErrorWhenItIsFocused -->
        <test-method signature="shouldRouteSignupPageWhenClickTheLink(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldRouteSignupPageWhenClickTheLink" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteSignupPageWhenClickTheLink -->
        <test-method signature="shouldRouteSignupPageWhenClickTheLink(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldRouteSignupPageWhenClickTheLink" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteSignupPageWhenClickTheLink -->
        <test-method signature="shouldRouteHomePageWhenSuccessfullyLogin(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldRouteHomePageWhenSuccessfullyLogin" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteHomePageWhenSuccessfullyLogin -->
        <test-method signature="shouldRouteSignupPageWhenClickTheLink(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldRouteSignupPageWhenClickTheLink" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteSignupPageWhenClickTheLink -->
        <test-method signature="shouldRouteHomePageWhenSuccessfullyLogin(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldRouteHomePageWhenSuccessfullyLogin" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteHomePageWhenSuccessfullyLogin -->
        <test-method signature="shouldRouteHomePageWhenSuccessfullyLogin(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldRouteHomePageWhenSuccessfullyLogin" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteHomePageWhenSuccessfullyLogin -->
        <test-method signature="shouldRouteHomePageWhenSuccessfullyLogin(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldRouteHomePageWhenSuccessfullyLogin" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteHomePageWhenSuccessfullyLogin -->
        <test-method signature="shouldRouteSignupPageWhenClickTheLink(org.openqa.selenium.Dimension)[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="shouldRouteSignupPageWhenClickTheLink" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteSignupPageWhenClickTheLink -->
        <test-method is-config="true" signature="afterClass()[pri:0, instance:example.LoginPageTest@1ce24091]" started-at="2020-02-15T19:27:40Z" name="afterClass" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="FAIL">
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
	at example.BaseTest.afterClass(BaseTest.java:134)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:564)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:213)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:138)
	at org.testng.internal.TestMethodWorker.invokeAfterClassMethods(TestMethodWorker.java:225)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:114)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
            <line>
              <![CDATA[After Class]]>
            </line>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- example.LoginPageTest -->
      <class name="example.HeaderComponentTest">
        <test-method is-config="true" signature="beforeClass(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:example.HeaderComponentTest@302552ec]" started-at="2020-02-15T19:27:40Z" name="beforeClass" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="shouldDisplayLoginNavMenuItemInHeader(org.openqa.selenium.Dimension)[pri:0, instance:example.HeaderComponentTest@302552ec]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayLoginNavMenuItemInHeader" data-provider="desktop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayLoginNavMenuItemInHeader -->
        <test-method signature="shouldDisplayBlogsNavMenuItemInHeader(org.openqa.selenium.Dimension)[pri:0, instance:example.HeaderComponentTest@302552ec]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogsNavMenuItemInHeader" data-provider="desktop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogsNavMenuItemInHeader -->
        <test-method signature="shouldDisplayNavMenuToggleIconInHeader(org.openqa.selenium.Dimension)[pri:0, instance:example.HeaderComponentTest@302552ec]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayNavMenuToggleIconInHeader" data-provider="lte-laptop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayNavMenuToggleIconInHeader -->
        <test-method signature="shouldDisplayNavMenuToggleIconInHeader(org.openqa.selenium.Dimension)[pri:0, instance:example.HeaderComponentTest@302552ec]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayNavMenuToggleIconInHeader" data-provider="lte-laptop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayNavMenuToggleIconInHeader -->
        <test-method signature="shouldDisplayNavMenuToggleIconInHeader(org.openqa.selenium.Dimension)[pri:0, instance:example.HeaderComponentTest@302552ec]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayNavMenuToggleIconInHeader" data-provider="lte-laptop" finished-at="2020-02-15T19:27:40Z" duration-ms="2" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayNavMenuToggleIconInHeader -->
        <test-method signature="shouldDisplaySignupNavMenuItemInHeader(org.openqa.selenium.Dimension)[pri:0, instance:example.HeaderComponentTest@302552ec]" started-at="2020-02-15T19:27:40Z" name="shouldDisplaySignupNavMenuItemInHeader" data-provider="desktop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplaySignupNavMenuItemInHeader -->
        <test-method signature="shouldDisplayTitleInHeader(org.openqa.selenium.Dimension)[pri:0, instance:example.HeaderComponentTest@302552ec]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayTitleInHeader" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayTitleInHeader -->
        <test-method signature="shouldDisplayTitleInHeader(org.openqa.selenium.Dimension)[pri:0, instance:example.HeaderComponentTest@302552ec]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayTitleInHeader" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="1" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayTitleInHeader -->
        <test-method signature="shouldDisplayTitleInHeader(org.openqa.selenium.Dimension)[pri:0, instance:example.HeaderComponentTest@302552ec]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayTitleInHeader" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayTitleInHeader -->
        <test-method signature="shouldRouteToBlogListPageWhenClickBlogListLinkAfterOpenMenuBar(org.openqa.selenium.Dimension)[pri:0, instance:example.HeaderComponentTest@302552ec]" started-at="2020-02-15T19:27:40Z" name="shouldRouteToBlogListPageWhenClickBlogListLinkAfterOpenMenuBar" data-provider="lte-laptop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteToBlogListPageWhenClickBlogListLinkAfterOpenMenuBar -->
        <test-method signature="shouldRouteToBlogListPageWhenClickBlogListLinkAfterOpenMenuBar(org.openqa.selenium.Dimension)[pri:0, instance:example.HeaderComponentTest@302552ec]" started-at="2020-02-15T19:27:40Z" name="shouldRouteToBlogListPageWhenClickBlogListLinkAfterOpenMenuBar" data-provider="lte-laptop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteToBlogListPageWhenClickBlogListLinkAfterOpenMenuBar -->
        <test-method signature="shouldDisplayTitleInHeader(org.openqa.selenium.Dimension)[pri:0, instance:example.HeaderComponentTest@302552ec]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayTitleInHeader" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayTitleInHeader -->
        <test-method signature="shouldRouteToBlogListPageWhenClickBlogListLinkAfterOpenMenuBar(org.openqa.selenium.Dimension)[pri:0, instance:example.HeaderComponentTest@302552ec]" started-at="2020-02-15T19:27:40Z" name="shouldRouteToBlogListPageWhenClickBlogListLinkAfterOpenMenuBar" data-provider="lte-laptop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteToBlogListPageWhenClickBlogListLinkAfterOpenMenuBar -->
        <test-method signature="shouldRouteToLoginPageWhenClickLoginLinkAfterOpenMenuBar(org.openqa.selenium.Dimension)[pri:0, instance:example.HeaderComponentTest@302552ec]" started-at="2020-02-15T19:27:40Z" name="shouldRouteToLoginPageWhenClickLoginLinkAfterOpenMenuBar" data-provider="lte-laptop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteToLoginPageWhenClickLoginLinkAfterOpenMenuBar -->
        <test-method signature="shouldRouteToLoginPageWhenClickLoginLinkAfterOpenMenuBar(org.openqa.selenium.Dimension)[pri:0, instance:example.HeaderComponentTest@302552ec]" started-at="2020-02-15T19:27:40Z" name="shouldRouteToLoginPageWhenClickLoginLinkAfterOpenMenuBar" data-provider="lte-laptop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteToLoginPageWhenClickLoginLinkAfterOpenMenuBar -->
        <test-method signature="shouldRouteToLoginPageWhenClickLoginLinkAfterOpenMenuBar(org.openqa.selenium.Dimension)[pri:0, instance:example.HeaderComponentTest@302552ec]" started-at="2020-02-15T19:27:40Z" name="shouldRouteToLoginPageWhenClickLoginLinkAfterOpenMenuBar" data-provider="lte-laptop" finished-at="2020-02-15T19:27:40Z" duration-ms="1" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteToLoginPageWhenClickLoginLinkAfterOpenMenuBar -->
        <test-method signature="shouldRouteToBlogListPageWhenClickBlogsLinkInHeader(org.openqa.selenium.Dimension)[pri:0, instance:example.HeaderComponentTest@302552ec]" started-at="2020-02-15T19:27:40Z" name="shouldRouteToBlogListPageWhenClickBlogsLinkInHeader" data-provider="desktop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteToBlogListPageWhenClickBlogsLinkInHeader -->
        <test-method signature="shouldRouteToSignupPageWhenClickSignupLinkAfterOpenMenuBar(org.openqa.selenium.Dimension)[pri:0, instance:example.HeaderComponentTest@302552ec]" started-at="2020-02-15T19:27:40Z" name="shouldRouteToSignupPageWhenClickSignupLinkAfterOpenMenuBar" data-provider="lte-laptop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteToSignupPageWhenClickSignupLinkAfterOpenMenuBar -->
        <test-method signature="shouldRouteToSignupPageWhenClickSignupLinkAfterOpenMenuBar(org.openqa.selenium.Dimension)[pri:0, instance:example.HeaderComponentTest@302552ec]" started-at="2020-02-15T19:27:40Z" name="shouldRouteToSignupPageWhenClickSignupLinkAfterOpenMenuBar" data-provider="lte-laptop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteToSignupPageWhenClickSignupLinkAfterOpenMenuBar -->
        <test-method signature="shouldRouteToLoginPageWhenClickLoginLinkInHeader(org.openqa.selenium.Dimension)[pri:0, instance:example.HeaderComponentTest@302552ec]" started-at="2020-02-15T19:27:40Z" name="shouldRouteToLoginPageWhenClickLoginLinkInHeader" data-provider="desktop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteToLoginPageWhenClickLoginLinkInHeader -->
        <test-method signature="shouldRouteToSignupPageWhenClickSignupLinkInHeader(org.openqa.selenium.Dimension)[pri:0, instance:example.HeaderComponentTest@302552ec]" started-at="2020-02-15T19:27:40Z" name="shouldRouteToSignupPageWhenClickSignupLinkInHeader" data-provider="desktop" finished-at="2020-02-15T19:27:40Z" duration-ms="1" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteToSignupPageWhenClickSignupLinkInHeader -->
        <test-method signature="shouldRouteToSignupPageWhenClickSignupLinkAfterOpenMenuBar(org.openqa.selenium.Dimension)[pri:0, instance:example.HeaderComponentTest@302552ec]" started-at="2020-02-15T19:27:40Z" name="shouldRouteToSignupPageWhenClickSignupLinkAfterOpenMenuBar" data-provider="lte-laptop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteToSignupPageWhenClickSignupLinkAfterOpenMenuBar -->
        <test-method is-config="true" signature="afterClass()[pri:0, instance:example.HeaderComponentTest@302552ec]" started-at="2020-02-15T19:27:40Z" name="afterClass" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="FAIL">
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
	at example.BaseTest.afterClass(BaseTest.java:134)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:564)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:213)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:138)
	at org.testng.internal.TestMethodWorker.invokeAfterClassMethods(TestMethodWorker.java:225)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:114)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
            <line>
              <![CDATA[After Class]]>
            </line>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- example.HeaderComponentTest -->
      <class name="example.SignupPageTest">
        <test-method is-config="true" signature="beforeClass(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="beforeClass" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="shouldDisplayConfirmInputEmptyValidationErrorWhenItIsFocused(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayConfirmInputEmptyValidationErrorWhenItIsFocused" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayConfirmInputEmptyValidationErrorWhenItIsFocused -->
        <test-method signature="shouldDisplayConfirmInputEmptyValidationErrorWhenItIsFocused(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayConfirmInputEmptyValidationErrorWhenItIsFocused" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="1" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayConfirmInputEmptyValidationErrorWhenItIsFocused -->
        <test-method signature="shouldDisplayConfirmInputEmptyValidationErrorWhenItIsFocused(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayConfirmInputEmptyValidationErrorWhenItIsFocused" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayConfirmInputEmptyValidationErrorWhenItIsFocused -->
        <test-method signature="shouldDisplayEmailInputEmptyValidationErrorWhenItIsFocused(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayEmailInputEmptyValidationErrorWhenItIsFocused" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayEmailInputEmptyValidationErrorWhenItIsFocused -->
        <test-method signature="shouldDisplayEmailInputEmptyValidationErrorWhenItIsFocused(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayEmailInputEmptyValidationErrorWhenItIsFocused" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayEmailInputEmptyValidationErrorWhenItIsFocused -->
        <test-method signature="shouldDisplayConfirmInputEmptyValidationErrorWhenItIsFocused(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayConfirmInputEmptyValidationErrorWhenItIsFocused" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayConfirmInputEmptyValidationErrorWhenItIsFocused -->
        <test-method signature="shouldDisplayEmailInputEmptyValidationErrorWhenItIsFocused(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayEmailInputEmptyValidationErrorWhenItIsFocused" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayEmailInputEmptyValidationErrorWhenItIsFocused -->
        <test-method signature="shouldDisplayNameInputEmptyValidationErrorWhenItIsFocused(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayNameInputEmptyValidationErrorWhenItIsFocused" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayNameInputEmptyValidationErrorWhenItIsFocused -->
        <test-method signature="shouldDisplayNameInputEmptyValidationErrorWhenItIsFocused(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayNameInputEmptyValidationErrorWhenItIsFocused" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayNameInputEmptyValidationErrorWhenItIsFocused -->
        <test-method signature="shouldDisplayNameInputEmptyValidationErrorWhenItIsFocused(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayNameInputEmptyValidationErrorWhenItIsFocused" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayNameInputEmptyValidationErrorWhenItIsFocused -->
        <test-method signature="shouldDisplayEmailInputEmptyValidationErrorWhenItIsFocused(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayEmailInputEmptyValidationErrorWhenItIsFocused" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayEmailInputEmptyValidationErrorWhenItIsFocused -->
        <test-method signature="shouldDisplayNameInputEmptyValidationErrorWhenItIsFocused(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayNameInputEmptyValidationErrorWhenItIsFocused" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayNameInputEmptyValidationErrorWhenItIsFocused -->
        <test-method signature="shouldDisplayPasswordInputEmptyValidationErrorWhenItIsFocused(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayPasswordInputEmptyValidationErrorWhenItIsFocused" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayPasswordInputEmptyValidationErrorWhenItIsFocused -->
        <test-method signature="shouldDisplayPasswordInputEmptyValidationErrorWhenItIsFocused(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayPasswordInputEmptyValidationErrorWhenItIsFocused" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayPasswordInputEmptyValidationErrorWhenItIsFocused -->
        <test-method signature="shouldDisplayUserAlreadyExistMessageWhenEmailAlreadyExist(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayUserAlreadyExistMessageWhenEmailAlreadyExist" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayUserAlreadyExistMessageWhenEmailAlreadyExist -->
        <test-method signature="shouldDisplayPasswordInputEmptyValidationErrorWhenItIsFocused(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayPasswordInputEmptyValidationErrorWhenItIsFocused" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayPasswordInputEmptyValidationErrorWhenItIsFocused -->
        <test-method signature="shouldDisplayPasswordInputEmptyValidationErrorWhenItIsFocused(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayPasswordInputEmptyValidationErrorWhenItIsFocused" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayPasswordInputEmptyValidationErrorWhenItIsFocused -->
        <test-method signature="shouldDisplayUserAlreadyExistMessageWhenEmailAlreadyExist(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayUserAlreadyExistMessageWhenEmailAlreadyExist" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayUserAlreadyExistMessageWhenEmailAlreadyExist -->
        <test-method signature="shouldNotAllowToSubmitWhenAtLeastOneError(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldNotAllowToSubmitWhenAtLeastOneError" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotAllowToSubmitWhenAtLeastOneError -->
        <test-method signature="shouldDisplayUserAlreadyExistMessageWhenEmailAlreadyExist(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayUserAlreadyExistMessageWhenEmailAlreadyExist" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayUserAlreadyExistMessageWhenEmailAlreadyExist -->
        <test-method signature="shouldNotAllowToSubmitWhenAtLeastOneError(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldNotAllowToSubmitWhenAtLeastOneError" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotAllowToSubmitWhenAtLeastOneError -->
        <test-method signature="shouldNotAllowToSubmitWhenAtLeastOneError(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldNotAllowToSubmitWhenAtLeastOneError" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotAllowToSubmitWhenAtLeastOneError -->
        <test-method signature="shouldDisplayUserAlreadyExistMessageWhenEmailAlreadyExist(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayUserAlreadyExistMessageWhenEmailAlreadyExist" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayUserAlreadyExistMessageWhenEmailAlreadyExist -->
        <test-method signature="shouldNotAllowToSubmitWhenAtLeastOneError(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldNotAllowToSubmitWhenAtLeastOneError" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotAllowToSubmitWhenAtLeastOneError -->
        <test-method signature="shouldRouteHomePageWhenSuccessfullySignup(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldRouteHomePageWhenSuccessfullySignup" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="1" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteHomePageWhenSuccessfullySignup -->
        <test-method signature="shouldNotDisplayAnyValidationErrorMessageWhenInitialLoad(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldNotDisplayAnyValidationErrorMessageWhenInitialLoad" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotDisplayAnyValidationErrorMessageWhenInitialLoad -->
        <test-method signature="shouldRouteHomePageWhenSuccessfullySignup(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldRouteHomePageWhenSuccessfullySignup" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteHomePageWhenSuccessfullySignup -->
        <test-method signature="shouldNotDisplayAnyValidationErrorMessageWhenInitialLoad(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldNotDisplayAnyValidationErrorMessageWhenInitialLoad" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotDisplayAnyValidationErrorMessageWhenInitialLoad -->
        <test-method signature="shouldRouteHomePageWhenSuccessfullySignup(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldRouteHomePageWhenSuccessfullySignup" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteHomePageWhenSuccessfullySignup -->
        <test-method signature="shouldNotDisplayAnyValidationErrorMessageWhenInitialLoad(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldNotDisplayAnyValidationErrorMessageWhenInitialLoad" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotDisplayAnyValidationErrorMessageWhenInitialLoad -->
        <test-method signature="shouldNotDisplayAnyValidationErrorMessageWhenInitialLoad(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldNotDisplayAnyValidationErrorMessageWhenInitialLoad" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotDisplayAnyValidationErrorMessageWhenInitialLoad -->
        <test-method signature="shouldRouteLoginPageWhenClickTheLink(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldRouteLoginPageWhenClickTheLink" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteLoginPageWhenClickTheLink -->
        <test-method signature="shouldRouteHomePageWhenSuccessfullySignup(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldRouteHomePageWhenSuccessfullySignup" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteHomePageWhenSuccessfullySignup -->
        <test-method is-config="true" signature="afterClass()[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="afterClass" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="FAIL">
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
	at example.BaseTest.afterClass(BaseTest.java:134)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:564)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:213)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:138)
	at org.testng.internal.TestMethodWorker.invokeAfterClassMethods(TestMethodWorker.java:225)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:114)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
            <line>
              <![CDATA[After Class]]>
            </line>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="shouldRouteLoginPageWhenClickTheLink(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldRouteLoginPageWhenClickTheLink" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteLoginPageWhenClickTheLink -->
        <test-method signature="shouldRouteLoginPageWhenClickTheLink(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldRouteLoginPageWhenClickTheLink" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteLoginPageWhenClickTheLink -->
        <test-method signature="shouldRouteLoginPageWhenClickTheLink(org.openqa.selenium.Dimension)[pri:0, instance:example.SignupPageTest@fbd1f6]" started-at="2020-02-15T19:27:40Z" name="shouldRouteLoginPageWhenClickTheLink" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteLoginPageWhenClickTheLink -->
      </class> <!-- example.SignupPageTest -->
      <class name="example.BlogManagementPageTest">
        <test-method is-config="true" signature="beforeClass(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:39Z" name="beforeClass" finished-at="2020-02-15T19:27:39Z" duration-ms="0" status="FAIL">
          <exception class="org.testng.TestNGException">
            <message>
              <![CDATA[
Parameter 'os' is required by @Configuration on method beforeClass but has not been marked @Optional or defined
]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.TestNGException: 
Parameter 'os' is required by @Configuration on method beforeClass but has not been marked @Optional or defined

	at org.testng.internal.Parameters.createParameters(Parameters.java:155)
	at org.testng.internal.Parameters.createParameters(Parameters.java:355)
	at org.testng.internal.Parameters.createConfigurationParameters(Parameters.java:86)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:199)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:138)
	at org.testng.internal.TestMethodWorker.invokeBeforeClassMethods(TestMethodWorker.java:175)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:107)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.TestNGException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="shouldDeleteASpecificBlogItemWhenClickDeleteButtonOnTheBlogItem(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDeleteASpecificBlogItemWhenClickDeleteButtonOnTheBlogItem" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="3" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeleteASpecificBlogItemWhenClickDeleteButtonOnTheBlogItem -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDeleteASpecificBlogItemWhenClickDeleteButtonOnTheBlogItem(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDeleteASpecificBlogItemWhenClickDeleteButtonOnTheBlogItem" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeleteASpecificBlogItemWhenClickDeleteButtonOnTheBlogItem -->
        <test-method signature="shouldDeleteASpecificBlogItemWhenClickDeleteButtonOnTheBlogItem(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDeleteASpecificBlogItemWhenClickDeleteButtonOnTheBlogItem" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeleteASpecificBlogItemWhenClickDeleteButtonOnTheBlogItem -->
        <test-method signature="shouldDeleteASpecificBlogItemWhenClickDeleteButtonOnTheBlogItem(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDeleteASpecificBlogItemWhenClickDeleteButtonOnTheBlogItem" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeleteASpecificBlogItemWhenClickDeleteButtonOnTheBlogItem -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayBlogManagementAfterChangeDifferentPage(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementAfterChangeDifferentPage" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementAfterChangeDifferentPage -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayBlogManagementAfterChangeDifferentPage(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementAfterChangeDifferentPage" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementAfterChangeDifferentPage -->
        <test-method signature="shouldDisplayBlogManagementAfterChangeDifferentPage(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementAfterChangeDifferentPage" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementAfterChangeDifferentPage -->
        <test-method signature="shouldDisplayBlogManagementAfterChangeDifferentPage(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementAfterChangeDifferentPage" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementAfterChangeDifferentPage -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayBlogManagementAfterClickLimitChangeElement(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementAfterClickLimitChangeElement" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="1" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementAfterClickLimitChangeElement -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayBlogManagementAfterClickLimitChangeElement(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementAfterClickLimitChangeElement" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementAfterClickLimitChangeElement -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayBlogManagementAfterClickLimitChangeElement(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementAfterClickLimitChangeElement" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementAfterClickLimitChangeElement -->
        <test-method signature="shouldDisplayBlogManagementAfterClickLimitChangeElement(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementAfterClickLimitChangeElement" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementAfterClickLimitChangeElement -->
        <test-method signature="shouldDisplayBlogManagementAfterClickRefreshBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementAfterClickRefreshBtn" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementAfterClickRefreshBtn -->
        <test-method signature="shouldDisplayBlogManagementAfterClickRefreshBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementAfterClickRefreshBtn" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="1" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementAfterClickRefreshBtn -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayBlogManagementAfterClickRefreshBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementAfterClickRefreshBtn" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementAfterClickRefreshBtn -->
        <test-method signature="shouldDisplayBlogManagementAfterClickRefreshBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementAfterClickRefreshBtn" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementAfterClickRefreshBtn -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayBlogManagementAfterClickTheFirstPageBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementAfterClickTheFirstPageBtn" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="1" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementAfterClickTheFirstPageBtn -->
        <test-method signature="shouldDisplayBlogManagementAfterClickTheFirstPageBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementAfterClickTheFirstPageBtn" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementAfterClickTheFirstPageBtn -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayBlogManagementAfterClickTheFirstPageBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementAfterClickTheFirstPageBtn" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementAfterClickTheFirstPageBtn -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayBlogManagementAfterClickTheLastpageBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementAfterClickTheLastpageBtn" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementAfterClickTheLastpageBtn -->
        <test-method signature="shouldDisplayBlogManagementAfterClickTheFirstPageBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementAfterClickTheFirstPageBtn" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementAfterClickTheFirstPageBtn -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayBlogManagementAfterClickTheLastpageBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementAfterClickTheLastpageBtn" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="1" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementAfterClickTheLastpageBtn -->
        <test-method signature="shouldDisplayBlogManagementAfterClickTheLastpageBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementAfterClickTheLastpageBtn" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementAfterClickTheLastpageBtn -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayBlogManagementAfterClickTheLastpageBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementAfterClickTheLastpageBtn" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementAfterClickTheLastpageBtn -->
        <test-method signature="shouldDisplayBlogManagementAfterInitialFetch(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementAfterInitialFetch" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="1" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementAfterInitialFetch -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayBlogManagementAfterInitialFetch(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementAfterInitialFetch" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementAfterInitialFetch -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayBlogManagementAfterInitialFetch(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementAfterInitialFetch" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementAfterInitialFetch -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayBlogManagementAfterEndDateFilterChange(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementAfterEndDateFilterChange" data-provider="desktop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementAfterEndDateFilterChange -->
        <test-method signature="shouldDisplayBlogManagementAfterKeywordFilterChange(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementAfterKeywordFilterChange" data-provider="desktop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementAfterKeywordFilterChange -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayBlogManagementAfterInitialFetch(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementAfterInitialFetch" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementAfterInitialFetch -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayBlogManagementAfterStartDateFilterChange(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementAfterStartDateFilterChange" data-provider="desktop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementAfterStartDateFilterChange -->
        <test-method signature="shouldDisplayBlogManagementAfterTagFilterChange(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementAfterTagFilterChange" data-provider="desktop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementAfterTagFilterChange -->
        <test-method signature="shouldDisplayBlogManagementPageHeading(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementPageHeading" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="1" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementPageHeading -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayBlogManagementPageHeading(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementPageHeading" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementPageHeading -->
        <test-method signature="shouldDisplayBlogManagementPageHeading(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementPageHeading" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementPageHeading -->
        <test-method signature="shouldDisplayBlogManagementPageHeading(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementPageHeading" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementPageHeading -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayBlogManagementSortedByClapDesc(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementSortedByClapDesc" data-provider="desktop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementSortedByClapDesc -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayBlogManagementSortedByClapAsc(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementSortedByClapAsc" data-provider="desktop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementSortedByClapAsc -->
        <test-method signature="shouldDisplayBlogManagementSortedByDateAsc(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementSortedByDateAsc" data-provider="desktop" finished-at="2020-02-15T19:27:40Z" duration-ms="1" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementSortedByDateAsc -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayBlogManagementSortedByDateDesc(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementSortedByDateDesc" data-provider="desktop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementSortedByDateDesc -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayBlogManagementSortedByTitleAsc(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementSortedByTitleAsc" data-provider="desktop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementSortedByTitleAsc -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayInitialFetchSuccessMessageSuccess(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayInitialFetchSuccessMessageSuccess" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="1" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayInitialFetchSuccessMessageSuccess -->
        <test-method signature="shouldDisplayBlogManagementSortedByTitleDesc(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogManagementSortedByTitleDesc" data-provider="desktop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogManagementSortedByTitleDesc -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayInitialFetchSuccessMessageSuccess(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayInitialFetchSuccessMessageSuccess" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayInitialFetchSuccessMessageSuccess -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayInitialFetchSuccessMessageSuccess(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayInitialFetchSuccessMessageSuccess" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayInitialFetchSuccessMessageSuccess -->
        <test-method signature="shouldDisplaySortAndFilterOverlaySettingWhenClickSettingBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplaySortAndFilterOverlaySettingWhenClickSettingBtn" data-provider="lte-tablet" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplaySortAndFilterOverlaySettingWhenClickSettingBtn -->
        <test-method signature="shouldDisplayInitialFetchSuccessMessageSuccess(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayInitialFetchSuccessMessageSuccess" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayInitialFetchSuccessMessageSuccess -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldRouteUserToUpdateBlogPageWhenClickEditBlogLinkOfSpecificBlogItem(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldRouteUserToUpdateBlogPageWhenClickEditBlogLinkOfSpecificBlogItem" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteUserToUpdateBlogPageWhenClickEditBlogLinkOfSpecificBlogItem -->
        <test-method signature="shouldRouteUserToUpdateBlogPageWhenClickEditBlogLinkOfSpecificBlogItem(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldRouteUserToUpdateBlogPageWhenClickEditBlogLinkOfSpecificBlogItem" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteUserToUpdateBlogPageWhenClickEditBlogLinkOfSpecificBlogItem -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplaySortAndFilterOverlaySettingWhenClickSettingBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldDisplaySortAndFilterOverlaySettingWhenClickSettingBtn" data-provider="lte-tablet" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplaySortAndFilterOverlaySettingWhenClickSettingBtn -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldRouteUserToUpdateBlogPageWhenClickEditBlogLinkOfSpecificBlogItem(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldRouteUserToUpdateBlogPageWhenClickEditBlogLinkOfSpecificBlogItem" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteUserToUpdateBlogPageWhenClickEditBlogLinkOfSpecificBlogItem -->
        <test-method signature="shouldRouteUserToUpdateBlogPageWhenClickEditBlogLinkOfSpecificBlogItem(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldRouteUserToUpdateBlogPageWhenClickEditBlogLinkOfSpecificBlogItem" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteUserToUpdateBlogPageWhenClickEditBlogLinkOfSpecificBlogItem -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldrouteUsertoNewBlogpageWhenClickNewBlogLink(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldrouteUsertoNewBlogpageWhenClickNewBlogLink" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldrouteUsertoNewBlogpageWhenClickNewBlogLink -->
        <test-method signature="shouldrouteUsertoNewBlogpageWhenClickNewBlogLink(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldrouteUsertoNewBlogpageWhenClickNewBlogLink" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="1" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldrouteUsertoNewBlogpageWhenClickNewBlogLink -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldrouteUsertoNewBlogpageWhenClickNewBlogLink(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldrouteUsertoNewBlogpageWhenClickNewBlogLink" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldrouteUsertoNewBlogpageWhenClickNewBlogLink -->
        <test-method is-config="true" signature="afterClass()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="afterClass" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="FAIL">
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
	at example.BaseTest.afterClass(BaseTest.java:134)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:564)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:213)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:138)
	at org.testng.internal.TestMethodWorker.invokeAfterClassMethods(TestMethodWorker.java:225)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:114)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
            <line>
              <![CDATA[After Class]]>
            </line>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldrouteUsertoNewBlogpageWhenClickNewBlogLink(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="shouldrouteUsertoNewBlogpageWhenClickNewBlogLink" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldrouteUsertoNewBlogpageWhenClickNewBlogLink -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.BlogManagementPageTest@5dda768f]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
      </class> <!-- example.BlogManagementPageTest -->
      <class name="example.BlogPageTest">
        <test-method signature="shouldDisplayBlogAtBlogPage(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogPageTest@26794848]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogAtBlogPage" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="1" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogAtBlogPage -->
        <test-method is-config="true" signature="beforeClass(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:example.BlogPageTest@26794848]" started-at="2020-02-15T19:27:40Z" name="beforeClass" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="shouldDisplayBlogAtBlogPage(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogPageTest@26794848]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogAtBlogPage" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogAtBlogPage -->
        <test-method signature="shouldDisplayBlogAtBlogPage(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogPageTest@26794848]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogAtBlogPage" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogAtBlogPage -->
        <test-method is-config="true" signature="afterClass()[pri:0, instance:example.BlogPageTest@26794848]" started-at="2020-02-15T19:27:40Z" name="afterClass" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="FAIL">
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
	at example.BaseTest.afterClass(BaseTest.java:134)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:564)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:213)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:138)
	at org.testng.internal.TestMethodWorker.invokeAfterClassMethods(TestMethodWorker.java:225)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:114)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
            <line>
              <![CDATA[After Class]]>
            </line>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="shouldDisplayBlogAtBlogPage(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogPageTest@26794848]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogAtBlogPage" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogAtBlogPage -->
      </class> <!-- example.BlogPageTest -->
      <class name="example.BlogListPageTest">
        <test-method is-config="true" signature="beforeClass(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="beforeClass" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="shouldDisplayBlogListAfterChangeDifferentPage(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListAfterChangeDifferentPage" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="1" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListAfterChangeDifferentPage -->
        <test-method signature="shouldDisplayBlogListAfterChangeDifferentPage(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListAfterChangeDifferentPage" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListAfterChangeDifferentPage -->
        <test-method signature="shouldDisplayBlogListAfterChangeDifferentPage(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListAfterChangeDifferentPage" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListAfterChangeDifferentPage -->
        <test-method signature="shouldDisplayBlogListAfterChangeDifferentPage(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListAfterChangeDifferentPage" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListAfterChangeDifferentPage -->
        <test-method signature="shouldDisplayBlogListAfterClickRefreshBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListAfterClickRefreshBtn" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="1" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListAfterClickRefreshBtn -->
        <test-method signature="shouldDisplayBlogListAfterClickLimitChangeElement(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListAfterClickLimitChangeElement" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListAfterClickLimitChangeElement -->
        <test-method signature="shouldDisplayBlogListAfterClickLimitChangeElement(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListAfterClickLimitChangeElement" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListAfterClickLimitChangeElement -->
        <test-method signature="shouldDisplayBlogListAfterClickLimitChangeElement(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListAfterClickLimitChangeElement" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListAfterClickLimitChangeElement -->
        <test-method signature="shouldDisplayBlogListAfterClickLimitChangeElement(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListAfterClickLimitChangeElement" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListAfterClickLimitChangeElement -->
        <test-method signature="shouldDisplayBlogListAfterClickRefreshBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListAfterClickRefreshBtn" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListAfterClickRefreshBtn -->
        <test-method signature="shouldDisplayBlogListAfterClickTheFirstPageBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListAfterClickTheFirstPageBtn" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListAfterClickTheFirstPageBtn -->
        <test-method signature="shouldDisplayBlogListAfterClickRefreshBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListAfterClickRefreshBtn" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListAfterClickRefreshBtn -->
        <test-method signature="shouldDisplayBlogListAfterClickTheFirstPageBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListAfterClickTheFirstPageBtn" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListAfterClickTheFirstPageBtn -->
        <test-method signature="shouldDisplayBlogListAfterClickTheFirstPageBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListAfterClickTheFirstPageBtn" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListAfterClickTheFirstPageBtn -->
        <test-method signature="shouldDisplayBlogListAfterClickRefreshBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListAfterClickRefreshBtn" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListAfterClickRefreshBtn -->
        <test-method signature="shouldDisplayBlogListAfterClickTheFirstPageBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListAfterClickTheFirstPageBtn" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListAfterClickTheFirstPageBtn -->
        <test-method signature="shouldDisplayBlogListAfterClickTheLastpageBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListAfterClickTheLastpageBtn" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListAfterClickTheLastpageBtn -->
        <test-method signature="shouldDisplayBlogListAfterClickTheLastpageBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListAfterClickTheLastpageBtn" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListAfterClickTheLastpageBtn -->
        <test-method signature="shouldDisplayBlogListAfterEndDateFilterChange(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListAfterEndDateFilterChange" data-provider="desktop" finished-at="2020-02-15T19:27:40Z" duration-ms="1" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListAfterEndDateFilterChange -->
        <test-method signature="shouldDisplayBlogListAfterClickTheLastpageBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListAfterClickTheLastpageBtn" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListAfterClickTheLastpageBtn -->
        <test-method signature="shouldDisplayBlogListAfterClickTheLastpageBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListAfterClickTheLastpageBtn" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListAfterClickTheLastpageBtn -->
        <test-method signature="shouldDisplayBlogListAfterInitialFetch(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListAfterInitialFetch" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListAfterInitialFetch -->
        <test-method signature="shouldDisplayBlogListAfterInitialFetch(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListAfterInitialFetch" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListAfterInitialFetch -->
        <test-method signature="shouldDisplayBlogListAfterInitialFetch(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListAfterInitialFetch" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListAfterInitialFetch -->
        <test-method signature="shouldDisplayBlogListAfterInitialFetch(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListAfterInitialFetch" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListAfterInitialFetch -->
        <test-method signature="shouldDisplayBlogListAfterTagFilterChange(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListAfterTagFilterChange" data-provider="desktop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListAfterTagFilterChange -->
        <test-method signature="shouldDisplayBlogListAfterStartDateFilterChange(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListAfterStartDateFilterChange" data-provider="desktop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListAfterStartDateFilterChange -->
        <test-method signature="shouldDisplayBlogListAfterKeywordFilterChange(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListAfterKeywordFilterChange" data-provider="desktop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListAfterKeywordFilterChange -->
        <test-method signature="shouldDisplayBlogListPageHeading(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListPageHeading" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListPageHeading -->
        <test-method signature="shouldDisplayBlogListPageHeading(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListPageHeading" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListPageHeading -->
        <test-method signature="shouldDisplayBlogListPageHeading(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListPageHeading" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListPageHeading -->
        <test-method signature="shouldDisplayBlogListPageHeading(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListPageHeading" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListPageHeading -->
        <test-method signature="shouldDisplayBlogListSortedByClapAsc(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListSortedByClapAsc" data-provider="desktop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListSortedByClapAsc -->
        <test-method signature="shouldDisplayBlogListSortedByClapDesc(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListSortedByClapDesc" data-provider="desktop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListSortedByClapDesc -->
        <test-method signature="shouldDisplayBlogListSortedByDateAsc(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListSortedByDateAsc" data-provider="desktop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListSortedByDateAsc -->
        <test-method signature="shouldDisplayBlogListSortedByDateDesc(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListSortedByDateDesc" data-provider="desktop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListSortedByDateDesc -->
        <test-method signature="shouldDisplayBlogListSortedByTitleAsc(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListSortedByTitleAsc" data-provider="desktop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListSortedByTitleAsc -->
        <test-method signature="shouldDisplayInitialFetchSuccessMessageSuccess(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayInitialFetchSuccessMessageSuccess" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayInitialFetchSuccessMessageSuccess -->
        <test-method signature="shouldDisplayInitialFetchSuccessMessageSuccess(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayInitialFetchSuccessMessageSuccess" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayInitialFetchSuccessMessageSuccess -->
        <test-method signature="shouldDisplayBlogListSortedByTitleDesc(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayBlogListSortedByTitleDesc" data-provider="desktop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayBlogListSortedByTitleDesc -->
        <test-method signature="shouldDisplayInitialFetchSuccessMessageSuccess(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayInitialFetchSuccessMessageSuccess" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="1" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayInitialFetchSuccessMessageSuccess -->
        <test-method signature="shouldDisplaySortAndFilterOverlaySettingWhenClickSettingBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplaySortAndFilterOverlaySettingWhenClickSettingBtn" data-provider="lte-tablet" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplaySortAndFilterOverlaySettingWhenClickSettingBtn -->
        <test-method signature="shouldDisplayInitialFetchSuccessMessageSuccess(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayInitialFetchSuccessMessageSuccess" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayInitialFetchSuccessMessageSuccess -->
        <test-method signature="shouldDisplaySortAndFilterOverlaySettingWhenClickSettingBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldDisplaySortAndFilterOverlaySettingWhenClickSettingBtn" data-provider="lte-tablet" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplaySortAndFilterOverlaySettingWhenClickSettingBtn -->
        <test-method signature="shouldGuideUserToSignupPageAfterClickJoinBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldGuideUserToSignupPageAfterClickJoinBtn" data-provider="gte-laptop" finished-at="2020-02-15T19:27:40Z" duration-ms="1" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldGuideUserToSignupPageAfterClickJoinBtn -->
        <test-method signature="shouldGuideUserToSignupPageAfterClickJoinBtnForSmallScreenSize(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldGuideUserToSignupPageAfterClickJoinBtnForSmallScreenSize" data-provider="lte-tablet" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldGuideUserToSignupPageAfterClickJoinBtnForSmallScreenSize -->
        <test-method is-config="true" signature="afterClass()[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="afterClass" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="FAIL">
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
	at example.BaseTest.afterClass(BaseTest.java:134)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:564)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:213)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:138)
	at org.testng.internal.TestMethodWorker.invokeAfterClassMethods(TestMethodWorker.java:225)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:114)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
            <line>
              <![CDATA[After Class]]>
            </line>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="shouldGuideUserToSignupPageAfterClickJoinBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldGuideUserToSignupPageAfterClickJoinBtn" data-provider="gte-laptop" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldGuideUserToSignupPageAfterClickJoinBtn -->
        <test-method signature="shouldGuideUserToSignupPageAfterClickJoinBtnForSmallScreenSize(org.openqa.selenium.Dimension)[pri:0, instance:example.BlogListPageTest@3b0090a4]" started-at="2020-02-15T19:27:40Z" name="shouldGuideUserToSignupPageAfterClickJoinBtnForSmallScreenSize" data-provider="lte-tablet" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldGuideUserToSignupPageAfterClickJoinBtnForSmallScreenSize -->
      </class> <!-- example.BlogListPageTest -->
      <class name="example.HomePageTest">
        <test-method is-config="true" signature="beforeClass(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:example.HomePageTest@bcec361]" started-at="2020-02-15T19:27:40Z" name="beforeClass" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="shouldDisplay5Blog_itemAtInitialLoad(org.openqa.selenium.Dimension)[pri:0, instance:example.HomePageTest@bcec361]" started-at="2020-02-15T19:27:40Z" name="shouldDisplay5Blog_itemAtInitialLoad" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplay5Blog_itemAtInitialLoad -->
        <test-method signature="shouldDisplay5Blog_itemAtInitialLoad(org.openqa.selenium.Dimension)[pri:0, instance:example.HomePageTest@bcec361]" started-at="2020-02-15T19:27:40Z" name="shouldDisplay5Blog_itemAtInitialLoad" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="2" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplay5Blog_itemAtInitialLoad -->
        <test-method signature="shouldDisplay5Blog_itemAtInitialLoad(org.openqa.selenium.Dimension)[pri:0, instance:example.HomePageTest@bcec361]" started-at="2020-02-15T19:27:40Z" name="shouldDisplay5Blog_itemAtInitialLoad" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplay5Blog_itemAtInitialLoad -->
        <test-method signature="shouldDisplay5Blog_itemAtInitialLoad(org.openqa.selenium.Dimension)[pri:0, instance:example.HomePageTest@bcec361]" started-at="2020-02-15T19:27:40Z" name="shouldDisplay5Blog_itemAtInitialLoad" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplay5Blog_itemAtInitialLoad -->
        <test-method signature="shouldFetchPopularBlogWhenClickPopularBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.HomePageTest@bcec361]" started-at="2020-02-15T19:27:40Z" name="shouldFetchPopularBlogWhenClickPopularBtn" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldFetchPopularBlogWhenClickPopularBtn -->
        <test-method signature="shouldFetchPopularBlogWhenClickPopularBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.HomePageTest@bcec361]" started-at="2020-02-15T19:27:40Z" name="shouldFetchPopularBlogWhenClickPopularBtn" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldFetchPopularBlogWhenClickPopularBtn -->
        <test-method signature="shouldFetchPopularBlogWhenClickPopularBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.HomePageTest@bcec361]" started-at="2020-02-15T19:27:40Z" name="shouldFetchPopularBlogWhenClickPopularBtn" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldFetchPopularBlogWhenClickPopularBtn -->
        <test-method signature="shouldFetchPopularBlogWhenClickPopularBtn(org.openqa.selenium.Dimension)[pri:0, instance:example.HomePageTest@bcec361]" started-at="2020-02-15T19:27:40Z" name="shouldFetchPopularBlogWhenClickPopularBtn" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldFetchPopularBlogWhenClickPopularBtn -->
        <test-method signature="shouldRouteSearchResultPageWhenSearchInHome(org.openqa.selenium.Dimension)[pri:0, instance:example.HomePageTest@bcec361]" started-at="2020-02-15T19:27:40Z" name="shouldRouteSearchResultPageWhenSearchInHome" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteSearchResultPageWhenSearchInHome -->
        <test-method signature="shouldRouteSearchResultPageWhenSearchInHome(org.openqa.selenium.Dimension)[pri:0, instance:example.HomePageTest@bcec361]" started-at="2020-02-15T19:27:40Z" name="shouldRouteSearchResultPageWhenSearchInHome" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteSearchResultPageWhenSearchInHome -->
        <test-method signature="shouldRouteSearchResultPageWhenSearchInHome(org.openqa.selenium.Dimension)[pri:0, instance:example.HomePageTest@bcec361]" started-at="2020-02-15T19:27:40Z" name="shouldRouteSearchResultPageWhenSearchInHome" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteSearchResultPageWhenSearchInHome -->
        <test-method signature="shouldRouteSearchResultPageWhenSearchInHome(org.openqa.selenium.Dimension)[pri:0, instance:example.HomePageTest@bcec361]" started-at="2020-02-15T19:27:40Z" name="shouldRouteSearchResultPageWhenSearchInHome" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteSearchResultPageWhenSearchInHome -->
        <test-method is-config="true" signature="afterClass()[pri:0, instance:example.HomePageTest@bcec361]" started-at="2020-02-15T19:27:40Z" name="afterClass" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="FAIL">
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
	at example.BaseTest.afterClass(BaseTest.java:134)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:564)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:213)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:138)
	at org.testng.internal.TestMethodWorker.invokeAfterClassMethods(TestMethodWorker.java:225)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:114)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
            <line>
              <![CDATA[After Class]]>
            </line>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method signature="shouldRouteSignupPageWhenJoinBtnIsClicked(org.openqa.selenium.Dimension)[pri:0, instance:example.HomePageTest@bcec361]" started-at="2020-02-15T19:27:40Z" name="shouldRouteSignupPageWhenJoinBtnIsClicked" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteSignupPageWhenJoinBtnIsClicked -->
        <test-method signature="shouldRouteSignupPageWhenJoinBtnIsClicked(org.openqa.selenium.Dimension)[pri:0, instance:example.HomePageTest@bcec361]" started-at="2020-02-15T19:27:40Z" name="shouldRouteSignupPageWhenJoinBtnIsClicked" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteSignupPageWhenJoinBtnIsClicked -->
        <test-method signature="shouldRouteSignupPageWhenJoinBtnIsClicked(org.openqa.selenium.Dimension)[pri:0, instance:example.HomePageTest@bcec361]" started-at="2020-02-15T19:27:40Z" name="shouldRouteSignupPageWhenJoinBtnIsClicked" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteSignupPageWhenJoinBtnIsClicked -->
        <test-method signature="shouldRouteSignupPageWhenJoinBtnIsClicked(org.openqa.selenium.Dimension)[pri:0, instance:example.HomePageTest@bcec361]" started-at="2020-02-15T19:27:40Z" name="shouldRouteSignupPageWhenJoinBtnIsClicked" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteSignupPageWhenJoinBtnIsClicked -->
      </class> <!-- example.HomePageTest -->
      <class name="example.ProfilePageTest">
        <test-method is-config="true" signature="beforeClass(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="beforeClass" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="shouldCreateAvatarImage(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldCreateAvatarImage" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCreateAvatarImage -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDeleteExistingAvatarImage(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldDeleteExistingAvatarImage" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeleteExistingAvatarImage -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDeleteExistingAvatarImage(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldDeleteExistingAvatarImage" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeleteExistingAvatarImage -->
        <test-method signature="shouldCreateAvatarImage(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldCreateAvatarImage" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCreateAvatarImage -->
        <test-method signature="shouldCreateAvatarImage(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldCreateAvatarImage" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCreateAvatarImage -->
        <test-method signature="shouldCreateAvatarImage(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldCreateAvatarImage" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCreateAvatarImage -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDeleteExistingAvatarImage(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldDeleteExistingAvatarImage" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeleteExistingAvatarImage -->
        <test-method signature="shouldDeleteExistingAvatarImage(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldDeleteExistingAvatarImage" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeleteExistingAvatarImage -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayAllUPdateUserInfoAfterAllUserInfochnageRequestWithAvatarImage(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayAllUPdateUserInfoAfterAllUserInfochnageRequestWithAvatarImage" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayAllUPdateUserInfoAfterAllUserInfochnageRequestWithAvatarImage -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayAllUPdateUserInfoAfterAllUserInfochnageRequestWithAvatarImage(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayAllUPdateUserInfoAfterAllUserInfochnageRequestWithAvatarImage" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayAllUPdateUserInfoAfterAllUserInfochnageRequestWithAvatarImage -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayAllUPdateUserInfoAfterAllUserInfochnageRequestWithAvatarImage(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayAllUPdateUserInfoAfterAllUserInfochnageRequestWithAvatarImage" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayAllUPdateUserInfoAfterAllUserInfochnageRequestWithAvatarImage -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayAllUpdatedUserInfoAfterAllUserinfoChangeRequest(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayAllUpdatedUserInfoAfterAllUserinfoChangeRequest" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayAllUpdatedUserInfoAfterAllUserinfoChangeRequest -->
        <test-method signature="shouldDisplayAllUPdateUserInfoAfterAllUserInfochnageRequestWithAvatarImage(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayAllUPdateUserInfoAfterAllUserInfochnageRequestWithAvatarImage" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayAllUPdateUserInfoAfterAllUserInfochnageRequestWithAvatarImage -->
        <test-method signature="shouldDisplayAllUpdatedUserInfoAfterAllUserinfoChangeRequest(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayAllUpdatedUserInfoAfterAllUserinfoChangeRequest" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayAllUpdatedUserInfoAfterAllUserinfoChangeRequest -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayAllUpdatedUserInfoAfterAllUserinfoChangeRequest(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayAllUpdatedUserInfoAfterAllUserinfoChangeRequest" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayAllUpdatedUserInfoAfterAllUserinfoChangeRequest -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayAllUpdatedUserInfoAfterAllUserinfoChangeRequest(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayAllUpdatedUserInfoAfterAllUserinfoChangeRequest" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayAllUpdatedUserInfoAfterAllUserinfoChangeRequest -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayProfilePageHeading(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayProfilePageHeading" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="1" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayProfilePageHeading -->
        <test-method signature="shouldDisplayProfilePageHeading(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayProfilePageHeading" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayProfilePageHeading -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayProfilePageHeading(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayProfilePageHeading" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayProfilePageHeading -->
        <test-method signature="shouldDisplayUpdatedEmailAfterOnlyEmailChangeRequest(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayUpdatedEmailAfterOnlyEmailChangeRequest" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayUpdatedEmailAfterOnlyEmailChangeRequest -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayUpdatedEmailAfterOnlyEmailChangeRequest(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayUpdatedEmailAfterOnlyEmailChangeRequest" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayUpdatedEmailAfterOnlyEmailChangeRequest -->
        <test-method signature="shouldDisplayUpdatedEmailAfterOnlyEmailChangeRequest(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayUpdatedEmailAfterOnlyEmailChangeRequest" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="1" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayUpdatedEmailAfterOnlyEmailChangeRequest -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayProfilePageHeading(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayProfilePageHeading" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayProfilePageHeading -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayUpdatedNameAfterOnlyNameChangeRequest(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayUpdatedNameAfterOnlyNameChangeRequest" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayUpdatedNameAfterOnlyNameChangeRequest -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayUpdatedNameAfterOnlyNameChangeRequest(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayUpdatedNameAfterOnlyNameChangeRequest" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayUpdatedNameAfterOnlyNameChangeRequest -->
        <test-method signature="shouldDisplayUpdatedEmailAfterOnlyEmailChangeRequest(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayUpdatedEmailAfterOnlyEmailChangeRequest" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayUpdatedEmailAfterOnlyEmailChangeRequest -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayUpdatedNameAfterOnlyNameChangeRequest(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayUpdatedNameAfterOnlyNameChangeRequest" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayUpdatedNameAfterOnlyNameChangeRequest -->
        <test-method signature="shouldDisplayUpdatedNameAfterOnlyNameChangeRequest(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayUpdatedNameAfterOnlyNameChangeRequest" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayUpdatedNameAfterOnlyNameChangeRequest -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayUpdatedPasswordAfterOnlyPasswordChangeRequest(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayUpdatedPasswordAfterOnlyPasswordChangeRequest" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayUpdatedPasswordAfterOnlyPasswordChangeRequest -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayUpdatedPasswordAfterOnlyPasswordChangeRequest(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayUpdatedPasswordAfterOnlyPasswordChangeRequest" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayUpdatedPasswordAfterOnlyPasswordChangeRequest -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayUpdatedPasswordAfterOnlyPasswordChangeRequest(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayUpdatedPasswordAfterOnlyPasswordChangeRequest" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayUpdatedPasswordAfterOnlyPasswordChangeRequest -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldDisplayUpdatedPasswordAfterOnlyPasswordChangeRequest(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldDisplayUpdatedPasswordAfterOnlyPasswordChangeRequest" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayUpdatedPasswordAfterOnlyPasswordChangeRequest -->
        <test-method signature="shouldRouteUserBlogManagementPageWhenClickTheLink(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldRouteUserBlogManagementPageWhenClickTheLink" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="4" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteUserBlogManagementPageWhenClickTheLink -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldRouteUserBlogManagementPageWhenClickTheLink(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldRouteUserBlogManagementPageWhenClickTheLink" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="1" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteUserBlogManagementPageWhenClickTheLink -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldUnchangeExistingAvatarImage(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldUnchangeExistingAvatarImage" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldUnchangeExistingAvatarImage -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldRouteUserBlogManagementPageWhenClickTheLink(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldRouteUserBlogManagementPageWhenClickTheLink" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteUserBlogManagementPageWhenClickTheLink -->
        <test-method signature="shouldUnchangeExistingAvatarImage(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldUnchangeExistingAvatarImage" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldUnchangeExistingAvatarImage -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldRouteUserBlogManagementPageWhenClickTheLink(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldRouteUserBlogManagementPageWhenClickTheLink" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRouteUserBlogManagementPageWhenClickTheLink -->
        <test-method signature="shouldUnchangeExistingAvatarImage(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldUnchangeExistingAvatarImage" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="1" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldUnchangeExistingAvatarImage -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldUpdateExistingAvatarImageWithNewOne(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldUpdateExistingAvatarImageWithNewOne" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(768, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldUpdateExistingAvatarImageWithNewOne -->
        <test-method signature="shouldUpdateExistingAvatarImageWithNewOne(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldUpdateExistingAvatarImageWithNewOne" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(320, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldUpdateExistingAvatarImageWithNewOne -->
        <test-method signature="shouldUnchangeExistingAvatarImage(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldUnchangeExistingAvatarImage" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldUnchangeExistingAvatarImage -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="shouldUpdateExistingAvatarImageWithNewOne(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldUpdateExistingAvatarImageWithNewOne" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1440, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldUpdateExistingAvatarImageWithNewOne -->
        <test-method signature="shouldUpdateExistingAvatarImageWithNewOne(org.openqa.selenium.Dimension)[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="shouldUpdateExistingAvatarImageWithNewOne" data-provider="all-size" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[(1024, 1000)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldUpdateExistingAvatarImageWithNewOne -->
        <test-method is-config="true" signature="logout()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="logout" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="afterClass()[pri:0, instance:example.ProfilePageTest@3d285d7e]" started-at="2020-02-15T19:27:40Z" name="afterClass" finished-at="2020-02-15T19:27:40Z" duration-ms="0" status="FAIL">
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
	at example.BaseTest.afterClass(BaseTest.java:134)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:564)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:213)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:138)
	at org.testng.internal.TestMethodWorker.invokeAfterClassMethods(TestMethodWorker.java:225)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:114)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
            <line>
              <![CDATA[After Class]]>
            </line>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- example.ProfilePageTest -->
    </test> <!-- Surefire test -->
  </suite> <!-- Surefire suite -->
</testng-results>
